<?xml version="1.0" encoding="utf-8"?>
<l10n:LocaleMap 	enableLog="true"
					xmlns:mx="http://www.adobe.com/2006/mxml" 
					xmlns:l10n="library://ns.mindspace.com/l10n/flex/" >
	
	<mx:Metadata>
		<!-- References to bundles so embedding process works; 
			 if runtime loaded, then disable this section 
		-->
		[ResourceBundle("login")]
		[ResourceBundle("employees")]
		[ResourceBundle("language")]
	</mx:Metadata>
		
	<mx:Script>
		<![CDATA[
			import com.cafetownsend.domain.Employee;
			import com.cafetownsend.model.AppModel;
			import com.cafetownsend.model.Constants;
			import com.cafetownsend.presentation.LoginPresentationModel;
			import com.cafetownsend.view.EmployeeDetail;
			import com.cafetownsend.view.EmployeeDetailNavigation;
			import com.cafetownsend.view.EmployeeListNavigation;
			import com.cafetownsend.view.LoginView;
			import com.cafetownsend.view.MainView;
			
			import l10n.views.LanguageBar;
			
			import mx.containers.Form;
			import mx.resources.IResourceManager;
			import mx.resources.ResourceManager;

			// ********************************************************************************
			// Public Mutators and Properties (injected by Swiz)
			// ********************************************************************************
			
			/**
			 * To support l10n injection into non-displayObjects (e.g. data models)
			 * the LocaleMap must have instance references. So we use Swiz to inject
			 * a reference to each model bean instance that will be used or modified
			 * when locales change.
			 * 
			 */			
			[Bindable]
			[Inject("employeeModel.selectedEmployee")]
			public function get selectedEmployee():Employee {
				return _selectedEmployee;
			}
			public function set selectedEmployee(value:Employee):void {
				_selectedEmployee = value;
				Constants.EMPLOYEE_CONFIRM_DELETE = buildConfirmMessage();
			}

			[Bindable]
			[Inject]    
			public var authenticated : AppModel = null;
			
			[Inject]
			public var model         : LoginPresentationModel = null;
			
			
			// ********************************************************************************
			// Private Methods
			// ********************************************************************************
			
			/**
			 * Manual injections into static variables stored in the Constants class. 
			 * 
			 */
			private function onLocaleChanged(event:Event):void {
				var sri     : SmartResourceInjector = event.target as SmartResourceInjector;
				var cntr	: LoginView 			= sri.targetInstances[0] as LoginView;
				
				if(cntr != null) {
					
					/**
					 * l10nInjection supports injection into both GUI and non-GUI instances (data models, 
					 * controllers, etc). But static variables cannot be directly modifed with injection.
					 * This is manual process; shown below.
					 */
					Constants.LOGIN_FAILED_MESSAGE   		= _rMngr.getString("login","login.error.noMatch");
					Constants.LOGIN_FAILED_TITLE     		= _rMngr.getString("login","login.error.title");
					Constants.LOGIN_INVALID_USERNAME 		= _rMngr.getString("login","login.error.usernameRequired");
					Constants.LOGIN_INVALID_PASSWORD 		= _rMngr.getString("login","login.error.passwordRequired");
					
					Constants.EMPLOYEE_LOAD_ERROR 		 	= _rMngr.getString("employees","users.unableToLoad");
					Constants.EMPLOYEE_INVALID_FIRSTNAME 	= _rMngr.getString("employees","editor.invalid.firstName");
					Constants.EMPLOYEE_INVALID_LASTNAME  	= _rMngr.getString("employees","editor.invalid.lastName") ;
					Constants.EMPLOYEE_CONFIRM_DELETE 	 	= buildConfirmMessage();
					
					cntr.loginErrorTxt.text = "";				// Manually clear the error text...
					cntr.loginBtn.skin.invalidateProperties();	// Force refresh on custom skin part
					
					if (model != null) {
						model.usernameError 					= "";	// Clear all validation errors... 
						model.passwordError						= "";
					}
					
				} else {
					
					var main : MainView 			= sri.targetInstances[0] as MainView;
					if (main != null) {
						main.btnLogout.skin.invalidateProperties();	// Force refresh on custom skin part
					}
				}
			}
			
			private function buildConfirmMessage():String {
				var params : Array = selectedEmployee ? [selectedEmployee.firstName, selectedEmployee.lastName] : ["",""]; 
				return 	_rMngr.getString("employees","users.confirmDelete",params);
			}
			
			// ********************************************************************************
			// Private Attributes
			// ********************************************************************************
			
			
			private var _rMngr 				: IResourceManager 	= ResourceManager.getInstance();
			private var _selectedEmployee 	: Employee 			= null;

		]]>
	</mx:Script>
	
	
	<l10n:SmartResourceInjector bundleName="login" target="{MainView}" localeChange="onLocaleChanged(event);" >
		<l10n:ResourceProxy 		property="btnLogout.label" 		key="login.signOut" />
		<l10n:ResourceProxy 		property="txtWelcomeUser.text" 	key="login.welcome" parameters="{[authenticated.user.username]}" />
		<l10n:ResourceProxy 		property="imgHeader.source" 	key="login.header" type="class" />
		<!-- 
		      Would be better to inject a new styleName or a new styleSheet 
			  Note: The login and logout buttons have custom skins with states.
		            Because we are modifying the colors of skin part manually (instead of different styleName)
		            we must manually invalidate to force immediate redraws. (see lines 83/89).
		-->
		<l10n:ResourceProxy 		property="contentContainer.backgroundColor" key="content.background.color" />
		<l10n:ResourceProxy 		property="contentFrame.color" 				key="content.frame.color" />
		<l10n:ResourceProxy 		property="btnLogout.backgroundColor" 		key="content.frame.color" />
	</l10n:SmartResourceInjector>
	
	<l10n:SmartResourceInjector bundleName="login" target="{LoginView}" localeChange="onLocaleChanged(event);" >
		<l10n:ResourceProxy 		property="fiUserName.label" 	key="login.form.fiUserName" />
		<l10n:ResourceProxy 		property="fiPassword.label" 	key="login.form.fiPassword" />
		<l10n:ResourceProxy 		property="loginBtn.label" 		key="login.submit" />
		<l10n:ResourceProxy 		property="lblHint.text" 		key="login.tip" />
		
		<l10n:ResourceProxy 	property="loginBtn.backgroundColor" key="content.frame.color" />
	</l10n:SmartResourceInjector>
	
	<l10n:SmartResourceInjector bundleName="employees" target="{EmployeeListNavigation}" >
		<l10n:ResourceProxy 		property="btnCreate.label" 	key="users.buttons.create" />
		<l10n:ResourceProxy 		property="btnEdit.label" 	key="users.buttons.edit" />
		<l10n:ResourceProxy 		property="btnDelete.label" 	key="users.buttons.delete" />
	</l10n:SmartResourceInjector>
	
	<l10n:SmartResourceInjector bundleName="employees" target="{EmployeeDetailNavigation}" >
		<l10n:ResourceProxy 		property="btnBack.label" 	key="users.buttons.back" />
	</l10n:SmartResourceInjector>
	
	<l10n:SmartResourceInjector bundleName="employees" target="{EmployeeDetail}" >
		<l10n:ResourceProxy 		property="fiFirstName.label" 	key="form.fiFirstName" />
		<l10n:ResourceProxy 		property="fiLastName.label" 	key="form.fiLastName" />
		<l10n:ResourceProxy 		property="fiStartDate.label" 	key="form.fiStartDate" />
		<l10n:ResourceProxy 		property="fiEmail.label" 		key="form.fiEmail" />
		<l10n:ResourceProxy 		property="btnSubmit.label" 		key="form.buttons.submit" />
		<l10n:ResourceProxy 		property="btnDelete.label" 		key="form.buttons.delete" />
		
		<l10n:ResourceProxy 		property="scaleX" 				key="form.scaling" />
		<l10n:ResourceProxy 		property="scaleY" 				key="form.scaling" />
	</l10n:SmartResourceInjector>
	
	<l10n:SmartResourceInjector  bundleName="language" target="{LanguageBar}">
		<l10n:ResourceProxy 		property="lblBarHelp.text" 		key="languagebar.title" 	parameters="{['target.selectedLocale']}" />
		<!--
			See LocaleAssets for sort order on Flags 
		-->
		<l10n:ResourceProxy  		property="flags[0].toolTip" 	key="flag.toolTip.en_US" />
		<l10n:ResourceProxy  		property="flags[1].toolTip" 	key="flag.toolTip.es_ES" />
	</l10n:SmartResourceInjector>
	
	
	
</l10n:LocaleMap>